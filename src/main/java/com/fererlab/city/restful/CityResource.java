package com.fererlab.city.restful;

import com.fererlab.city.serviceengine.CityServiceEngine;
import com.fererlab.city.serviceengine.dto.CityDTO;
import com.fererlab.city.serviceengine.dto.StatusEnum;
import com.fererlab.core.interceptor.ContractException;

import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.ws.rs.*;
import java.util.Optional;


@Path("/city")
@Produces({"application/json"})
@Consumes({"application/json"})
@Stateless
@LocalBean
public class CityResource {

    @EJB(name = "CityServiceEngineImpl")
    CityServiceEngine cityServiceEngine;

    /**
     * creates a new City entity and returns the DTO related to this entity
     * test this method with http://localhost:8080/dbc-ejb/api/city/create/NAME_SUPPLIED_FOR_CITY
     *
     * @param name String value for a new city
     * @return CityDTO
     */
    @GET
    @Path("/create/{name}")
    public CityDTO create(@PathParam("name") String name) {
        Optional<CityDTO> cityDTOOptional = null;
        try {
            return cityServiceEngine.create(name);
        } catch (Exception e) {
            return new CityDTO(StatusEnum.FAIL);
        }
    }

    /**
     * finds the city with id and updates the name value with name parameter
     * test this method with http://localhost:8080/dbc-ejb/api/city/update/ID_CREATED_AT_CREATE_METHOD/NAME_SUPPLIED_TO_CREATE_METHOD
     *
     * @param id   generated by create method
     * @param name String value supplied at create method
     * @return CityDTO
     */
    @GET
    @Path("/update/{id}/{name}")
    public CityDTO update(@PathParam("id") Integer id, @PathParam("name") String name) throws ContractException {
        try {
            return cityServiceEngine.update(id, name);
        } catch (Exception e) {
            return new CityDTO(StatusEnum.FAIL);
        }
    }

}
